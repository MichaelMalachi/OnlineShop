1) Товары выбранные незалогиненным пользователем, после его регистрации и залогинивании должны быть у него в карзине
2) сделать админку
3) сделать "умный" поиск
4) сделать фильтры

later:
-celary
Переход сразу после регистрации
Переадрисация после нажатия на ссылку активации (поздравления с регистрацией)
admin
зафиксировать верхнее поле
работа с my-profile (фото пользователя, поля для информации о пользователя, история покупок)




python manage.py shell
from django.contrib.auth import get_user_model
User = get_user_model()
User.objects.create_superuser(email='vadym@gmail.com', username='vadym', password='vadym@gmail.com')
exit()





18.03 23:54

нужно, чтобы пользователь который вибрал товары в карзину и дошел до ээтапа карзины и увидел, что необходимо регистрация 

    {% if request.user.is_authenticated %}
    <a class="btn btn-link" href="#">Buy</a>
    {% else %}
    <a class="btn btn-link" href="{% url 'accounts:sing-up-link' %}">SingUp</a>
    {% endif %}

при регистрации не потерялись выбранные им товары, а после активации и залогинивания окозались у него в карзине 

файл 1: accounts/models.py

from urllib import request

from django.contrib.auth.models import AbstractUser
from django.db import models
from django.shortcuts import get_object_or_404

from shop.models import Cart
from shop.models import CartItem
from shop.models import Products

class OnlineShopUser(AbstractUser):
    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = []
    email = models.EmailField('email address', blank=True, unique=True)
    username = models.CharField(
        'username',
        max_length=150,
        unique=True,
    )

    def create_superuser(self, email, password, username, **extra_fields):
        extra_fields.setdefault('is_staff', True)
        extra_fields.setdefault('is_superuser', True)

        if extra_fields.get('is_staff') is not True:
            raise ValueError('Superuser must have is_staff=True.')
        if extra_fields.get('is_superuser') is not True:
            raise ValueError('Superuser must have is_superuser=True.')

        return self._create_user(email, password, username, **extra_fields)

    def merge_carts(self, session_cart):
        if session_cart:
            for product_id, quantity in session_cart.items():
                product = get_object_or_404(Products, pk=product_id)
                cart, _ = Cart.objects.get_or_create(user_name=self)
                cart_item, _ = CartItem.objects.get_or_create(cart=cart, product=product)
                cart_item.quantity += quantity
                cart_item.save()
            del request.session['cart']
            request.session.modified = True





файл 2: shop/templates/product_details.html
{% extends 'base.html' %}

{% block main_content %}
<div class="container text-center">
    <form method="post" action="{% url 'shop:create-product-link' %}" enctype="multipart/form-data">
        {% csrf_token %}


        <div class="row">
            <div class="col-md-6 offset-md-3">
                <p>
                    <label for="id_name">Name:</label>
                    <input type="text" name="name" maxlength="50" required id="id_name" class="form-control">
                </p>
            </div>
        </div>

        <div class="row">
            <div class="col-md-6 offset-md-3">
                <p>
                    <label for="id_description">Description:</label>
                    <input type="text" name="description" maxlength="50" required id="id_description"
                           class="form-control">
                </p>
            </div>
        </div>

        <div class="row">
            <div class="col-md-6 offset-md-3">
                <p>
                    <label for="id_price">Price:</label>
                    <input type="number" name="price" step="0.01" required id="id_price" class="form-control">
                </p>
            </div>
        </div>

        <div class="row">
            <div class="col-md-6 offset-md-3">
                <p>
                    <label for="id_image">Image:</label>
                    <input type="file" name="image" accept="image/*" required id="id_image" class="form-control-file">
                </p>
            </div>
        </div>

        <div class="row">
            <div class="col-md-6 offset-md-3">
                <button type="submit" class="btn btn-primary">Send</button>
            </div>
        </div>
    </form>
</div>
{% endblock %}

файл 3: shop/templates/cart.html
{% extends 'base.html' %}

{% block main_content %}
<div class="container mt-5">
    <h1 class="mb-4">Your Shopping Cart</h1>
    <table class="table">
        <thead>
        <tr>
            <th>Product</th>
            <th>Description</th>
            <th>Price</th>
            <th>Quantity</th>

        </tr>
        </thead>
        <tbody>
        {% for cart_item in cart_items %}
        <tr>
            <td>{{ cart_item.product.name }}</td>
            <td>{{ cart_item.product.description }}</td>
            <td>${{ cart_item.product.price }}</td>
            <td>{{ cart_item.quantity }}</td>
            {% if request.user.is_authenticated %}
            <td>
                <form action="{% url 'shop:remove_from_cart' cart_item.id %}" method="post">
                    {% csrf_token %}
                    <button type="submit" class="btn btn-danger">Remove</button>
                </form>
            </td>
            {% else %}
            <td>
                <form action="{% url 'shop:remove_from_cart_AnonymousUser' cart_item.product.id %}" method="post">
                    {% csrf_token %}
                    <button type="submit" class="btn btn-danger">Remove Anonymous User</button>
                </form>
            </td>
            {% endif %}

        </tr>
        {% endfor %}
        </tbody>
    </table>
    <h2>Total Price: ${{ total_price }}</h2>
    <h2>Total Quantity: {{ total_quantity }}</h2>
    {% if request.user.is_authenticated %}
    <a class="btn btn-link" href="#">Buy</a>
    {% else %}
    <a class="btn btn-link" href="{% url 'accounts:sing-up-link' %}">SingUp</a>
    {% endif %}
</div>
{% endblock %}


файл 4: shop/models.py

from django.db import models
from accounts.models import OnlineShopUser


class Products(models.Model):
    name = models.CharField(max_length=50)
    description = models.CharField(max_length=50)
    price = models.DecimalField(max_digits=6, decimal_places=2)
    image = models.ImageField(upload_to='images/')


class Cart(models.Model):
    user_name = models.ForeignKey(OnlineShopUser, on_delete=models.CASCADE)
    product_name = models.ManyToManyField(Products, through='CartItem')


class CartItem(models.Model):
    cart = models.ForeignKey(Cart, on_delete=models.CASCADE)
    product = models.ForeignKey(Products, on_delete=models.CASCADE)
    quantity = models.PositiveIntegerField(default=1)


class CustomUser(models.Model):
    user_id = models.CharField(max_length=100, unique=True)
    cart = models.OneToOneField(Cart, on_delete=models.CASCADE)


файл 5: shop/urls.py
from django.urls import path
from shop.views import ShopCreateView
from shop.views import ShopListView
from shop.views import ShopDetailsView
from shop.views import add_to_cart
from shop.views import add_to_cart_AnonymousUser
from shop.views import view_cart
from shop.views import view_cart_AnonymousUser
from shop.views import remove_from_cart_AnonymousUser


from shop.views import remove_from_cart

app_name = 'shop'

urlpatterns = [
    path('create/', ShopCreateView.as_view(), name="create-product-link"),
    path('list/', ShopListView.as_view(), name="list-products-link"),
    path('details/<int:pk>', ShopDetailsView.as_view(), name="details-products-link"),
    path('cart/', view_cart, name='cart'),
    path('cart_Anonymous_User/', view_cart_AnonymousUser, name='cart_AnonymousUser'),
    path('add_to_cart/', add_to_cart, name='add_to_cart'),
    path('add_to_cart_Anonymous_User/', add_to_cart_AnonymousUser, name='add_to_cart_AnonymousUser'),
    path('remove_from_cart/<int:cart_item_id>/', remove_from_cart, name='remove_from_cart'),
    path('remove_from_cart_AnonymousUser/<int:cart_item_id>/', remove_from_cart_AnonymousUser,
         name='remove_from_cart_AnonymousUser'),
    ]


файл 6: shop/views.py
from django.views.generic import CreateView
from django.views.generic import ListView
from django.views.generic import DetailView
from django.urls import reverse_lazy
from shop.product_form import Product_form_for_create
from django.http import HttpResponseBadRequest
from django.shortcuts import render
from django.contrib.auth.decorators import login_required
from django.shortcuts import get_object_or_404, redirect
from .models import Cart, CartItem, Products


class ShopCreateView(CreateView):
    model = Products
    form_class = Product_form_for_create
    success_url = reverse_lazy('home-link')
    template_name = 'product_create.html'


class ShopListView(ListView):
    model = Products
    template_name = 'product_list.html'


class ShopDetailsView(DetailView):
    model = Products
    template_name = 'product_details.html'


@login_required
def add_to_cart(request):
    if request.method == 'POST':
        product_id = request.POST.get('product_id')  # Получаем идентификатор продукта из формы
        quantity = request.POST.get('quantity')  # Получаем количество товара из формы

        if product_id and quantity:
            product = get_object_or_404(Products, pk=product_id)
            user = request.user
            cart, created = Cart.objects.get_or_create(user_name=user)
            cart_item, created = CartItem.objects.get_or_create(cart=cart, product=product)
            cart_item.quantity = int(quantity)  # Увеличиваем количество товара, если он уже есть в корзине
            cart_item.save()
            return redirect('home-link')
        else:
            return HttpResponseBadRequest("Product ID and quantity are required.")
    else:
        return HttpResponseBadRequest("Only POST method is allowed.")


def add_to_cart_AnonymousUser(request):
    if request.method == 'POST':
        product_id = request.POST.get('product_id')
        quantity = request.POST.get('quantity')
        if product_id and quantity:
            product = get_object_or_404(Products, pk=product_id)
            if 'cart' not in request.session:
                request.session['cart'] = {}
            cart = request.session['cart']
            if product_id in cart:
                cart[product_id] += int(quantity)
            else:
                cart[product_id] = int(quantity)
            request.session.modified = True
            return redirect('home-link')
        else:
            return HttpResponseBadRequest("Product ID and quantity are required.")
    else:
        return HttpResponseBadRequest("Only POST method is allowed.")


@login_required
def view_cart(request):
    cart_items = CartItem.objects.filter(cart__user_name=request.user if request.user.is_authenticated else None)
    total_price = 0
    total_quantity = 0
    for item in cart_items:
        total_price += item.quantity * item.product.price
        total_quantity += item.quantity
    context = {
        'cart_items': cart_items,
        'total_price': total_price,
        'total_quantity': total_quantity
    }
    return render(request, 'cart.html', context)


def view_cart_AnonymousUser(request):
    if 'cart' in request.session:
        cart_items = []
        total_price = 0
        total_quantity = 0

        for product_id, quantity in request.session['cart'].items():
            product = get_object_or_404(Products, pk=product_id)
            total_price += product.price * quantity
            total_quantity += quantity
            cart_items.append({'product': product, 'quantity': quantity})

        context = {
            'cart_items': cart_items,
            'total_price': total_price,
            'total_quantity': total_quantity
        }
    else:
        context = {'cart_items': [], 'total_price': 0, 'total_quantity': 0}

    return render(request, 'cart.html', context)


@login_required
def remove_from_cart(request, cart_item_id):
    cart_item = get_object_or_404(CartItem, id=cart_item_id)
    cart_item.delete()
    return redirect('shop:cart')


def remove_from_cart_AnonymousUser(request, cart_item_id):
    if 'cart' in request.session:
        cart = request.session['cart']
        if str(cart_item_id) in cart:
            del cart[str(cart_item_id)]
            request.session.modified = True
    return redirect('shop:cart_AnonymousUser')


файл 7: settings/settings.py

import os
from pathlib import Path

from django.urls import reverse_lazy

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-(m(y$)py&3+03d#8d8@fgc@8iu!s5u6dxmw=7)iv045-@3$1u='

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'general',
    'accounts',
    'shop',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'settings.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'settings.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'postgres',
        'USER': 'postgres',
        'PASSWORD': '1111',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


from django.urls import reverse_lazy

LOGIN_REDIRECT_URL = reverse_lazy('home-link')
LOGOUT_REDIRECT_URL = reverse_lazy('home-link')


HTTP_SCHEMA = 'http'
DOMAIN = "localhost:8000"

# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_USE_TLS = True
EMAIL_PORT = 587
EMAIL_HOST_USER = 'vadym.halivets@gmail.com'
EMAIL_HOST_PASSWORD = 'stgt nhbr ezca ekof'


MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


AUTH_USER_MODEL = "accounts.OnlineShopUser"




файл 7: accounts/views.py

from django.contrib.auth.forms import AuthenticationForm
from django.views.generic import DetailView
from django.views.generic import CreateView
from django.views.generic import RedirectView
from accounts.models import OnlineShopUser
from accounts.forms import SignUpForm
from django.urls import reverse_lazy
from django.shortcuts import get_object_or_404, render


class MyProfileView(DetailView):
    model = OnlineShopUser
    template_name = 'my-profile.html'

    def get_queryset(self):
        queryset = super().get_queryset()
        queryset = queryset.filter(id=self.request.user.id)
        return queryset


class SingUpView(CreateView):
    model = OnlineShopUser
    template_name = "sing_up.html"
    success_url = reverse_lazy("home-link")
    form_class = SignUpForm

    def form_valid(self, form):
        from django.contrib import messages
        messages.info(self.request, 'Thank for sign up! Please, check email')
        return super().form_valid(form)


class ActivateView(RedirectView):
    pattern_name = 'home-link'

    def get_redirect_url(self, *args, **kwargs):
        username = kwargs.pop("username")
        user = get_object_or_404(OnlineShopUser, username=username, is_active=False)
        user.is_active = True
        from django.contrib import messages
        user.save(update_fields=('is_active',))
        messages.info(self.request, 'Your accaunts is activated')
        user.refresh_from_db()
        return super().get_redirect_url(*args, **kwargs)


from django.contrib.auth import login, authenticate
from django.shortcuts import redirect
from django.urls import reverse_lazy

from accounts.models import OnlineShopUser

def signup(request):
    if request.method == 'POST':
        form = SignUpForm(request.POST)
        if form.is_valid():
            user = form.save()
            username = form.cleaned_data.get('username')
            raw_password = form.cleaned_data.get('password1')
            user = authenticate(username=username, password=raw_password)
            login(request, user)
            user.merge_carts(request.session.get('cart', {}))
            return redirect('home-link')
    else:
        form = SignUpForm()
    return render(request, 'signup.html', {'form': form})

def login(request):
    if request.method == 'POST':
        form = AuthenticationForm(request, request.POST)
        if form.is_valid():
            user = form.get_user()
            login(request, user)
            user.merge_carts(request.session.get('cart', {}))
            return redirect('home-link')
    else:
        form = AuthenticationForm()
    return render(request, 'login.html', {'form': form})

